{
  "partie": "3. Configuration et Intégration des Systèmes",
  "sous_partie": "3.1. Authentification et Sécurité",
  "taches": [
    {
      "titre": "3.1.1 Installer et configurer Breeze/Sanctum",
      "sous_taches": [
        {
          "titre": "3.1.1.1 Vérifier la présence des packages dans composer.json",
          "description": "Vérifier que laravel/breeze, laravel/sanctum sont listés dans composer.json."
        },
        {
          "titre": "3.1.1.2 Installer les packages manquants",
          "description": "Installer les packages manquants via Composer."
        },
        {
          "titre": "3.1.1.3 Lancer les commandes d'installation Breeze",
          "description": "Exécuter 'php artisan breeze:install'."
        },
        {
          "titre": "3.1.1.4 Vérifier la génération des fichiers d'authentification",
          "description": "Vérifier la présence des contrôleurs, vues, routes, providers générés par Breeze."
        },
        {
          "titre": "3.1.1.5 Vérifier la configuration des providers dans config/app.php",
          "description": "Vérifier que les ServiceProviders Breeze, Sanctum sont bien enregistrés."
        },
        {
          "titre": "3.1.1.6 Vérifier la configuration des middlewares dans app/Http/Kernel.php",
          "description": "Vérifier que les middlewares d'authentification (Sanctum)  sont bien présents."
        },
        {
          "titre": "3.1.1.7 Vérifier la configuration de Sanctum",
          "sous_taches": [
            {
              "titre": "3.1.1.7.1 Vérifier la présence du fichier de configuration Sanctum",
              "description": "Vérifier que config/sanctum.php existe et n'est pas vide."
            },
            {
              "titre": "3.1.1.7.2 Vérifier l'enregistrement du ServiceProvider Sanctum",
              "description": "Vérifier que Laravel\\Sanctum\\SanctumServiceProvider::class est bien présent dans config/app.php (section providers)."
            },
            {
              "titre": "3.1.1.7.3 Vérifier le middleware Sanctum dans Kernel.php",
              "description": "Vérifier que le middleware EnsureFrontendRequestsAreStateful est bien référencé dans app/Http/Kernel.php (groupe api ou global)."
            },
            {
              "titre": "3.1.1.7.4 Vérifier la configuration du guard sanctum dans auth.php",
              "description": "Vérifier que le guard sanctum est bien défini dans config/auth.php (section guards)."
            },
            {
              "titre": "3.1.1.7.5 Vérifier la configuration du provider users dans auth.php",
              "description": "Vérifier que le provider users est bien configuré dans config/auth.php."
            },
            {
              "titre": "3.1.1.7.6 Vérifier la configuration du middleware d'authentification API",
              "description": "Vérifier que les routes API protégées utilisent bien le middleware auth:sanctum."
            },
            {
              "titre": "3.1.1.7.7 Vérifier la configuration des cookies et domaines Sanctum",
              "description": "Vérifier les paramètres stateful et domain dans config/sanctum.php (adaptés à l'environnement)."
            },
            {
              "titre": "3.1.1.7.8 Vérifier la migration Sanctum",
              "description": "Vérifier la présence de la migration create_personal_access_tokens_table et que la table existe en base."
            }
          ]
        },
        {
          "titre": "3.1.1.9 Vérifier la configuration des guards/providers dans config/auth.php",
          "description": "Vérifier la configuration des guards web, api, sanctum, et des providers users."
        },
        {
          "titre": "3.1.1.10 Lancer les migrations liées à l'authentification",
          "description": "Exécuter 'php artisan migrate' pour créer les tables nécessaires à l'authentification."
        },
        {
          "titre": "3.1.1.11 Vérification de l'installation et de la configuration",
          "description": "Vérifier que l'authentification fonctionne (inscription, connexion, déconnexion, accès API protégés)."
        }
      ]
    },
    {
      "titre": "3.1.2 Générer les fichiers de configuration d'authentification",
      "sous_taches": [
        {
          "titre": "3.1.2.1 Vérifier la présence et la complétude des fichiers de config",
          "description": "Vérifier config/auth.php, config/sanctum.php."
        },
        {
          "titre": "3.1.2.2 Vérifier la configuration des guards",
          "description": "Vérifier la configuration des guards web, api, sanctum dans config/auth.php."
        },
        {
          "titre": "3.1.2.3 Vérifier la configuration des providers",
          "description": "Vérifier la configuration des providers users, etc. dans config/auth.php."
        },
        {
          "titre": "3.1.2.4 Vérifier la configuration des passwords et timeouts",
          "description": "Vérifier les paramètres de mot de passe, timeouts, etc. dans config/auth.php."
        },
        {
          "titre": "3.1.2.5 Vérification de la configuration",
          "description": "Vérifier que la configuration d'authentification est complète et cohérente."
        }
      ]
    },
    {
      "titre": "3.1.3 Générer les policies et gates",
      "sous_taches": [
        {
          "titre": "3.1.3.1 Générer les policies pour chaque entité métier",
          "sous_taches": [
            {
              "titre": "3.1.3.1.1 Générer la policy User",
              "description": "php artisan make:policy UserPolicy --model=User"
            },
            {
              "titre": "3.1.3.1.2 Générer la policy Classe",
              "description": "php artisan make:policy ClassePolicy --model=Classe"
            },
            {
              "titre": "3.1.3.1.3 Générer la policy Monster",
              "description": "php artisan make:policy MonsterPolicy --model=Monster"
            },
            {
              "titre": "3.1.3.1.4 Générer la policy NPC",
              "description": "php artisan make:policy NPCPolicy --model=NPC"
            },
            {
              "titre": "3.1.3.1.5 Générer la policy Item",
              "description": "php artisan make:policy ItemPolicy --model=Item"
            },
            {
              "titre": "3.1.3.1.6 Générer la policy Resource",
              "description": "php artisan make:policy ResourcePolicy --model=Resource"
            },
            {
              "titre": "3.1.3.1.7 Générer la policy Spell",
              "description": "php artisan make:policy SpellPolicy --model=Spell"
            },
            {
              "titre": "3.1.3.1.8 Générer la policy Capability",
              "description": "php artisan make:policy CapabilityPolicy --model=Capability"
            },
            {
              "titre": "3.1.3.1.9 Générer la policy Attribute",
              "description": "php artisan make:policy AttributePolicy --model=Attribute"
            },
            {
              "titre": "3.1.3.1.10 Générer la policy Consumable",
              "description": "php artisan make:policy ConsumablePolicy --model=Consumable"
            },
            {
              "titre": "3.1.3.1.11 Générer la policy Shop",
              "description": "php artisan make:policy ShopPolicy --model=Shop"
            },
            {
              "titre": "3.1.3.1.12 Générer la policy Specialization",
              "description": "php artisan make:policy SpecializationPolicy --model=Specialization"
            },
            {
              "titre": "3.1.3.1.13 Générer la policy Scenario",
              "description": "php artisan make:policy ScenarioPolicy --model=Scenario"
            },
            {
              "titre": "3.1.3.1.14 Générer la policy Campaign",
              "description": "php artisan make:policy CampaignPolicy --model=Campaign"
            },
            {
              "titre": "3.1.3.1.15 Générer la policy Panoply",
              "description": "php artisan make:policy PanoplyPolicy --model=Panoply"
            }
          ]
        },
        {
          "titre": "3.1.3.2 Vérifier la présence des policies dans app/Policies/",
          "description": "Vérifier que chaque policy générée est bien présente dans app/Policies/."
        },
        {
          "titre": "3.1.3.3 Enregistrer les policies dans AuthServiceProvider",
          "description": "Vérifier que chaque policy est bien enregistrée dans app/Providers/AuthServiceProvider.php."
        },
        {
          "titre": "3.1.3.4 Définir les gates pour les rôles",
          "sous_taches": [
            {
              "titre": "3.1.3.4.1 Définir les gates viewAny/view pour chaque entité",
              "description": "Définir les gates viewAny et view pour chaque entité métier, selon les rôles autorisés à la lecture (voir matrice des privilèges)."
            },
            {
              "titre": "3.1.3.4.2 Définir les gates create/update/delete pour chaque entité",
              "description": "Définir les gates create, update, delete pour chaque entité métier, selon les rôles autorisés à l'écriture (voir matrice des privilèges)."
            },
            {
              "titre": "3.1.3.4.3 Définir les gates manage pour les entités nécessitant une gestion avancée",
              "description": "Définir la gate manage pour les entités comme les privilèges, pages dynamiques, etc., selon la matrice des privilèges."
            },
            {
              "titre": "3.1.3.4.4 Vérifier la conformité à la matrice des privilèges",
              "description": "Vérifier que la logique de chaque gate respecte strictement la matrice des privilèges (CONTENT_OVERVIEW.md section 3.2)."
            },
            {
              "titre": "3.1.3.4.5 Prendre en compte les exceptions game_master et super_admin",
              "description": "Vérifier que les exceptions (game_master, super_admin) sont bien gérées dans les gates."
            },
            {
              "titre": "3.1.3.4.6 Vérifier les tests des gates",
              "description": "Vérifier que chaque gate est testée (tests unitaires ou manuels)."
            }
          ]
        },
        {
          "titre": "3.1.3.5 Vérifier la logique d'accès par rôle et entité",
          "description": "Vérifier que les droits d'accès sont conformes à la matrice des privilèges."
        },
        {
          "titre": "3.1.3.6 Vérification des policies et gates",
          "description": "Vérifier le fonctionnement des policies et gates (tests unitaires ou manuels)."
        }
      ]
    },
    {
      "titre": "3.1.4 Vérification de la sous-partie",
      "description": "Vérifier que toutes les tâches de cette sous-partie ont été réalisées correctement (détail adapté à la sous-partie)."
    },
    {
      "titre": "3.1.5 Log de la sous-partie",
      "description": "Consigner dans logs.txt un résumé daté de toutes les actions réalisées dans cette sous-partie, avec l'état de chaque tâche."
    }
  ]
}
