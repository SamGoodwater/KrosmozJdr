---
description:
globs:
alwaysApply: false
---
# Règle Cursor : atomic-design (Mise à jour)

## Centralisation des helpers

- **Tous les helpers universels** (props communes, accessibilité, mergeClasses, utilitaires custom, etc.) sont centralisés dans `uiHelper.js` (`/Utils/atomic-design/`).
- **Helpers spécifiques aux inputs** (`getInputProps`, `getInputAttrs`) dans `atomManager.js`.
- **Managers spécifiques** (`moleculeManager.js`, `organismManager.js`) possibles pour des besoins propres à ces niveaux, mais ils doivent réutiliser les helpers de `uiHelper.js`.
- **Aucune duplication** : tout helper réutilisable à plusieurs niveaux doit être factorisé dans `uiHelper.js`.

## Utilisation dans les composants

- **Atoms** :
  - Importent `getCommonProps`, `getCommonAttrs`, `mergeClasses`, `getCustomUtilityProps`, `getCustomUtilityClasses` depuis `uiHelper.js`.
  - Les atoms de type input importent aussi `getInputProps`, `getInputAttrs` depuis `atomManager.js`.
  - Exemple :
    ```js
    import { getCommonProps, getCommonAttrs, mergeClasses, getCustomUtilityProps, getCustomUtilityClasses } from '@/Utils/atomic-design/uiHelper';
    import { getInputProps, getInputAttrs } from '@/Utils/atomic-design/atomManager';
    ```

- **Molecules** :
  - Importent les helpers de `uiHelper.js`.
  - Peuvent importer des helpers de `moleculeManager.js` si besoin spécifique.
  - Certaines molecules sont des composants DaisyUI (Fieldset, FileInput, AvatarGroup, Modal, etc.) et doivent suivre la même rigueur d'API et de documentation que les atoms.
  - Exemple :
    ```js
    import { getCommonProps, getCommonAttrs, mergeClasses } from '@/Utils/atomic-design/uiHelper';
    ```

- **Organisms** :
  - Importent les helpers de `uiHelper.js`.
  - Peuvent importer des helpers de `organismManager.js` si besoin spécifique.

## Philosophie DRY et factorisation

- **Un helper ne doit jamais être dupliqué** : s'il est utile à plusieurs niveaux, il va dans `uiHelper.js`.
- **Les managers spécifiques** (atomManager, moleculeManager, organismManager) ne doivent contenir que des helpers propres à leur niveau.
- **La documentation de chaque composant** doit préciser l'origine des helpers utilisés.

## DaisyUI et molecules

- Certaines molecules sont des wrappers ou des compositions directes de composants DaisyUI (Fieldset, FileInput, AvatarGroup, Modal, etc.).
- Elles doivent respecter la même rigueur d'API, de slots, de props et de documentation que les atoms.
- Leur docBlock doit inclure un lien vers la documentation DaisyUI correspondante si applicable.

## Exemple d'import pour chaque niveau

- **Atom** :
  ```js
  import { getCommonProps, getCommonAttrs, mergeClasses } from '@/Utils/atomic-design/uiHelper';
  import { getInputProps, getInputAttrs } from '@/Utils/atomic-design/atomManager';
  ```
- **Molecule** :
  ```js
  import { getCommonProps, getCommonAttrs, mergeClasses } from '@/Utils/atomic-design/uiHelper';
  ```
- **Organism** :
  ```js
  import { getCommonProps, getCommonAttrs, mergeClasses } from '@/Utils/atomic-design/uiHelper';
  ```

---

**Résumé** :
- Tous les composants UI (atoms, molecules, organisms) partagent les mêmes helpers universels via `uiHelper.js`.
- Les helpers spécifiques (inputs, contextes, etc.) sont dans des managers dédiés.
- Les molecules DaisyUI sont documentées et rigoureusement typées comme les atoms.

