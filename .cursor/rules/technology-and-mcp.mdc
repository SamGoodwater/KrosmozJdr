---
name: technology-and-mcp
description: >
  Intègre la **stack Krosmoz‑JDR** (Laravel 12, PHP 8.4, Vue 3, Tailwind CSS, DaisyUI, Tiptap, esbuild/rollup)
  et les normes CI/CD/tests. Guide l’usage des MCP tools :
    - `playwright` pour interagir automatiquement avec l’UI (clics, formulaires, capture écran, logs).
    - `browser-tools` pour debug live via ton navigateur Vivaldi (logs, réseau, audits SEO/performance).
    - `laravel-db` (ou équivalent) pour introspection sans modification de la base de données.
globs:
  - "**/*.php"
  - "**/*.js"
  - "**/*.vue"
alwaysApply: true
---

## 📦 Stack & Technologies Krosmoz‑JDR

- **Backend** : Laravel 12 (PHP 8.4), MySQL (`krosmozDB`), secrets gérés via `.env` (ne **jamais** versionner ce fichier).
- **Frontend** : Vue 3, SCSS, Tailwind CSS + DaisyUI, Tiptap comme éditeur WYSIWYG, outil de build esbuild/rollup, multi-langues via vue-i18n.
- **Tests** : PHPUnit (backend), Vitest ou Jest (frontend), Cypress en end-to-end.
- **CI/CD** : pipelines GitHub ou GitLab CI automatisant le lint, les tests, le build et le déploiement.
- Docs projet à jour dans `/docs/` (notamment `TECHNOLOGIES.md`, `PROJECT_STRUCTURE.md`).

## 🧪 Quand utiliser chaque MCP Tool

### ✅ `playwright`
- Utiliser pour tout **scénario automatisé** : navigation, clics, remplissage de formulaires, upload, capture écran, lecture de logs JS et requêtes réseau.
- Le **snapshot DOM** (accessibilité) permet une interaction fiable sans vision. Aucun modèle visuel extérieur requis.
- Exemples :
  > “Use `playwright` to `http://localhost:5173/register`, fill name/email/password, submit form, screenshot page, then show console and network logs.”

### 🛠️ `browser-tools`
- Outil de **debug interactif à chaud**, s’exécute sur ton onglet Vivaldi ouvert via extension Chrome + serveur local.
- Fournit logs JS, trafic réseau, contrôles DOM, audits SEO/performance/accessibilité.
- Idéal dans la phase de développement interactivement, sans ouvrir une nouvelle session browser via MCP.
- Exemples :
  > “Use `browser-tools` to capture console errors when I click Submit in my dev tab.”  
  > “Run a performance audit or SEO check on this page.”

### 🧩 `laravel-db`
- Sert à **inspecter la base de données** via une interface Maestro local (`artisan mcp:serve` ou MySQL MCP dédié).
- Toujours en **mode lecture seule**, interroger les schémas, données de test, clés étrangères (SELECT uniquement).
- Exemples :
  > “Use `laravel-db` to describe the `users` table structure.”  
  > “Select the latest 5 rows in `spellbooks` table.”

---

## 🔄 Workflow recommandé de l’IA

1. Avant toute **modification front-end**, l’IA **passe par `playwright`** pour reproduire le workflow sur ton site local, capturer logs et screenshots.
2. Pour du **debug interactif**, l’IA répond aux prompts via `browser-tools` directement dans ton navigateur actuel, sans nouvel onglet.
3. Les **modifications backend** passent par `laravel-db`: pour lecture du schéma ou consultation de données, l’IA doit demander l’activation si le tool est disponible dans `.cursor/mcp.json`.
4. Si un tool demandé est **inactif ou non détecté**, l’IA doit inviter à le (ré)activer via `.cursor/mcp.json`.

---

## 📁 Références documentation

- `/docs/docs.index.json`, `/docs/00-Project/TECHNOLOGIES.md`, `/docs/10-BestPractices/PROJECT_STRUCTURE.md`
- Guide **Model Context Protocol** sur site officiel Cursor (réglages MCP, testing tools, modes intégrés)

---

## 💬 Conseils de rédaction des prompts

- Toujours mentionner explicitement le **tool** : `playwright`, `browser-tools` ou `laravel-db`.
- Décrire les actions souhaitées d’une manière **très directive et séquencée**.
- Exemples :
  > “Use `playwright` to open `/login`, type email, type password, click Login, then show me console and screenshot.”  
  > “Use `browser-tools` to capture all JS errors when I click Add Spell on the current tab.”

---

## ⚠️ Points de vigilance

- **Pas besoin de clé API externe** : Playwright MCP fonctionne en local via Node.js, licence Apache‑2.0, sans coût supplémentaire. Aucun traitement tiers ni besoin d’Anthropic API :contentReference[oaicite:1]{index=1}.
- **Compatibilité** :
  - macOS ou Linux (ou WSL2 sous Windows) recommandé pour fiabilité, en particulier sur les versions récents Cursor et Node.js 18+.
  - Sur versions Cursor 1.0+, Playwright MCP rencontre parfois des instabilités ou des problèmes d’ouverture du navigateur — assure-toi de garder tes outils à jour et surveiller les logs MCP :contentReference[oaicite:2]{index=2}.
- **Workflows complexes** (séquences > 25 appels MCP) peuvent saturer le contexte LLM : segmenter les prompts ou utiliser le mode auto-run avec prudence.

---

### ✅ Pourquoi cette rule est pertinente

- **AlwaysApply = true** : ton IA a en permanence un contexte clair sur ta stack et les outils disponibles.
- **Instruction explicite** sur quel tool utiliser selon la tâche (UI vs logs vs base).
- Compatible avec un environnement **entièrement local**, **gratuit**, **sans clés API externes** — donc sûr et maîtrisé.
- **Sécurité renforcée** : accès en lecture seulement sur la base, audits compatibles, aucun risque de fuite.

---

Dis-moi si tu veux maintenant un exemple de `.cursor/mcp.json` prêt à utiliser et un prompt type pour un cas d’usage (ex. inscrip­tion utilisateur avec Tiptap, audit SEO, etc.). Je peux te le préparer directement 💡
::contentReference[oaicite:3]{index=3}
