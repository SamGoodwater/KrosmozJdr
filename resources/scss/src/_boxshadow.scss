@use "sass:map";
@use "sass:list";
@use '../themes/_theme-global.scss' as *;
@use '../themes/_theme-caracs.scss' as *;
@use '../themes/_theme-entities.scss' as *;
@use '../utils/_functions.scss' as *;

$box-shadow-glass-opacity-base: (
  'xs': 3%,
  'sm': 6%,
  'md': 12%,
  'lg': 18%,
  'xl': 24%
);

$box-shadow-glass-combos: (
  'l': ('l'),
  'r': ('r'),
  't': ('t'),
  'b': ('b'),
  'x': ('l', 'r'),              // Horizontal
  'y': ('t', 'b'),              // Vertical
  'tl': ('t', 'l'),
  'tr': ('t', 'r'),
  'bl': ('b', 'l'),
  'br': ('b', 'r'),
  'tb': ('t', 'b'),
  'lr': ('l', 'r'),
  'trl': ('t', 'r', 'l'),
  'trb': ('t', 'r', 'b'),
  'tlb': ('t', 'l', 'b'),
  'brl': ('b', 'r', 'l')
);

@mixin box-shadow-glass($color, $opacity, $sides: 'all', $base-shadow: true) {
    @if $sides == 'all' {
      @if $base-shadow {
        box-shadow: 1px 1px 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent),
        1px 1px 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent);
      } @else {
        box-shadow: 1px 1px 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent);
      }
    } @else {
      $box-shadow: ();
    
      @if(is-not-empty($sides)) {
        @each $side in $sides {
            @if $side == 't' {
            $box-shadow: list.append($box-shadow, 0 -1px 0 color-mix(in oklch, #{$color} #{$opacity}, transparent), comma);
            @if $base-shadow {
              $box-shadow: list.append($box-shadow, 0 -1px 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent), comma);
            }
          } @else if $side == 'b' {
            $box-shadow: list.append($box-shadow, 0 1px 0 color-mix(in oklch, #{$color} #{$opacity}, transparent), comma);
            @if $base-shadow {
              $box-shadow: list.append($box-shadow, 0 1px 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent), comma);
            }
          } @else if $side == 'l' {
            $box-shadow: list.append($box-shadow, -1px 0 0 color-mix(in oklch, #{$color} #{$opacity}, transparent), comma);
            @if $base-shadow {
              $box-shadow: list.append($box-shadow, -1px 0 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent), comma);
            }
          } @else if $side == 'r' {
            $box-shadow: list.append($box-shadow, 1px 0 0 color-mix(in oklch, #{$color} #{$opacity}, transparent), comma);
            @if $base-shadow {
              $box-shadow: list.append($box-shadow, 1px 0 0 color-mix(in oklch, oklch(0% 0 0) #{$opacity}, transparent), comma);
            }
          } @else {
            @debug "side: #{$side}";
          }
        }
        
      $box-shadow: filter-list($box-shadow);

      $box-shadow-str: '';
      @for $i from 1 through list.length($box-shadow) {
        $box-shadow-str: $box-shadow-str + list.nth($box-shadow, $i);

        @if $i < list.length($box-shadow) {
          $box-shadow-str: $box-shadow-str + ', ';
        }
      }

      @if list.length($box-shadow) > 0 {
        box-shadow: #{$box-shadow-str};
      }
      }
  }
}

// ===============================
// 6. Génération automatique des classes utilitaires
//    - .box-shadow-glass-xs, .box-shadow-glass-tl-md, etc.
//    - Pour chaque couleur de chaque thème
// ===============================

// 6.1 Classes neutres (blanc, pour usage générique)
@each $size, $opacity-base in $box-shadow-glass-opacity-base {
  .box-shadow-glass-#{$size} {
    @include box-shadow-glass("var(--color-white)", $opacity-base);
  }
  @each $combo, $sides in $box-shadow-glass-combos {
    .box-shadow-glass-#{$combo}-#{$size} {
      @include box-shadow-glass("var(--color-white)", $opacity-base, $sides);
    }
  }
}

// 6.2 Classes thémées (couleurs issues des maps de thème)
// @each $theme-map in ($theme-global, $theme-caracs, $theme-entities) {
//   @each $name, $color in $theme-map {
//     @each $size, $opacity-base in $box-shadow-glass-opacity-base {
//       .box-shadow-glass-#{$name}-#{$size} {
//         @include box-shadow-glass("var(--color-#{$color}-500)", $opacity-base);
//       }
//       @each $combo, $sides in $box-shadow-glass-combos {
//         .box-shadow-glass-#{$name}-#{$combo}-#{$size} {
//           @include box-shadow-glass("var(--color-#{$color}-500)", $opacity-base, $sides);
//         }
//       }
//     }
//   }
// }