@use '../themes/_theme-global.scss' as *;
@use '../themes/_theme-caracs.scss' as *;
@use '../themes/_theme-entities.scss' as *;
@use "sass:list";

// Système DRY pour les bordures glassmorphism avec gestion directionnelle, globale, combinée et alias x/y
$border-glass-sizes: (
  'xs': (0.1, 0.1, 0.16),
  'sm': (0.15, 0.15, 0.18),
  'md': (0.2, 0.2, 0.2),
  'lg': (0.25, 0.25, 0.22),
  'xl': (0.3, 0.3, 0.24),
  '2xl': (0.35, 0.35, 0.26),
  '3xl': (0.4, 0.4, 0.28),
  '4xl': (0.45, 0.45, 0.3)
);

// Map des combinaisons de côtés (avec alias x/y)
$border-glass-combos: (
  'l': ('l'),
  'r': ('r'),
  't': ('t'),
  'b': ('b'),
  'x': ('l', 'r'),
  'y': ('t', 'b'),
  'tl': ('t', 'l'),
  'tr': ('t', 'r'),
  'bl': ('b', 'l'),
  'br': ('b', 'r'),
  'tb': ('t', 'b'),
  'lr': ('l', 'r'),
  'trl': ('t', 'r', 'l'),
  'trb': ('t', 'r', 'b'),
  'tlb': ('t', 'l', 'b'),
  'brl': ('b', 'r', 'l')
);




// Mixin principal
@mixin border-glass($color, $sides, $box-shadow-opacity, $border-opacity-start, $border-opacity-end) {
  @if $sides == 'all' {
    box-shadow: 0px 0px 1px rgba(#{$color}, #{$box-shadow-opacity}) inset, 0px 0px 1px rgba(#{$color}, #{$box-shadow-opacity});
    border-image: linear-gradient(90deg, rgba(#{$color}, #{$border-opacity-start}) 0%, rgba(#{$color}, #{$border-opacity-start + 0.2}) 20%, rgba(#{$color}, #{$border-opacity-start}) 40%, rgba(#{$color}, #{$border-opacity-end}) 57%, rgba(#{$color}, #{$border-opacity-end - 0.01}) 100%) 1;
    border-width: 1px;
    border-style: solid;
  } @else {
    $shadows: ();
    @each $side in $sides {
      $shadow: null;
      @if $side == 'l' {
        $shadow: '-1px 0 1px 0 rgba(#{$color}, #{$box-shadow-opacity}) inset';
        border-image: linear-gradient(to bottom, rgba(#{$color}, #{$border-opacity-start}), rgba(#{$color}, #{$border-opacity-end})) 1 0 0 0;
        border-left-width: 1px;
        border-left-style: solid; 
      } @else if $side == 'r' {
        $shadow: '1px 0 1px 0 rgba(#{$color}, #{$box-shadow-opacity}) inset';
        border-image: linear-gradient(to bottom, rgba(#{$color}, #{$border-opacity-start}), rgba(#{$color}, #{$border-opacity-end})) 0 1 0 0;
        border-right-width: 1px;
        border-right-style: solid;
      } @else if $side == 't' {
        $shadow: '0 -1px 1px 0 rgba(#{$color}, #{$box-shadow-opacity}) inset';
        border-image: linear-gradient(to right, rgba(#{$color}, #{$border-opacity-start}), rgba(#{$color}, #{$border-opacity-end})) 0 0 1 0;
        border-top-width: 1px;
        border-top-style: solid;
      } @else if $side == 'b' {
        $shadow: '0 1px 1px 0 rgba(#{$color}, #{$box-shadow-opacity}) inset';
        border-image: linear-gradient(to right, rgba(#{$color}, #{$border-opacity-start}), rgba(#{$color}, #{$border-opacity-end})) 0 0 0 1;
        border-bottom-width: 1px;
        border-bottom-style: solid;
      }
      @if $shadow != null {
        $shadows: list.append($shadows, $shadow, comma);
      }
    }
    @if list.length($shadows) > 0 {
      box-shadow: #{list.join($shadows, ', ')};
    }
  }
}

// === Génération des classes glassmorphism ===
// 1. Classes neutres (blanc)
@each $size, $vals in $border-glass-sizes {
  .border-glass-#{$size} {
    @include border-glass("var(--tw-white)", 'all', list.nth($vals, 1), list.nth($vals, 2), list.nth($vals, 3));
  }
  @each $combo, $sides in $border-glass-combos {
    .border-glass-#{$combo}-#{$size} {
      @include border-glass("var(--tw-white)", $sides, list.nth($vals, 1), list.nth($vals, 2), list.nth($vals, 3));
    }
  }
}

// 2. Classes thémées
@each $theme-map in ($theme-global, $theme-caracs, $theme-entities) {
  @each $name, $color in $theme-map {
    @each $size, $vals in $border-glass-sizes {
      .border-glass-#{$name}-#{$size} {
        @include border-glass("var(--tw-#{$color})", 'all', list.nth($vals, 1), list.nth($vals, 2), list.nth($vals, 3));
      }
      @each $combo, $sides in $border-glass-combos {
        .border-glass-#{$name}-#{$combo}-#{$size} {
          @include border-glass("var(--tw-#{$color})", $sides, list.nth($vals, 1), list.nth($vals, 2), list.nth($vals, 3));
        }
      }
    }
  }
}
